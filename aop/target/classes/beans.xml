<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">
    <bean id="userService" class="com.sufu.spring.aop.service.impl.UserServiceImpl"/>
    <bean id="log" class="com.sufu.spring.aop.log.Log"/>

    <!--方式一：使用原生的Spring API接口-->
    <!--配置aop 需要导入aop约束-->
<!--    <aop:config>-->
<!--        &lt;!&ndash;切入点  execution(* com.sufu.spring.aop.service.impl.UserServiceImpl.*(..)) 执行操作的位置&ndash;&gt;-->
<!--        &lt;!&ndash;表达式：任意位置下的UserServiceImpl类的所有任意参数的方法&ndash;&gt;-->
<!--        <aop:pointcut id="pointcut" expression="execution(* com.sufu.spring.aop.service.impl.UserServiceImpl.*(..))"/>-->
<!--        &lt;!&ndash;执行一个环绕增加 也就是要执行的操作&ndash;&gt;-->
<!--        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>-->
<!--    </aop:config>-->

<!--    &lt;!&ndash;方式二：自定义类 这种方法不能获取类相关信息&ndash;&gt;-->
<!--    <bean id="myPointcut" class="com.sufu.spring.aop.pointcut.MyPointcut"/>-->
<!--    <aop:config>-->
<!--        &lt;!&ndash;自定义切面&ndash;&gt;-->
<!--        <aop:aspect ref="myPointcut">-->
<!--            &lt;!&ndash;切入点 就是要被代理的方法&ndash;&gt;-->
<!--            <aop:pointcut id="point" expression="execution(* com.sufu.spring.aop.service.impl.UserServiceImpl.*(..))"/>-->
<!--            &lt;!&ndash;配置通知 也就是在切入点方法执行之前还是之后 或者都执行的方法&ndash;&gt;-->
<!--            <aop:before method="before" pointcut-ref="point"/>-->
<!--            <aop:after method="after" pointcut-ref="point"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->
    <!--方式三：开启注解，注册bean，或者@component-->
    <bean id="myAspect" class="com.sufu.spring.aop.pointcut.MyPointcut2"/>
    <!--开启注解支持-->
    <aop:aspectj-autoproxy/>

</beans>